[project]
name = "notter-backend"
version = "1.0.0"
description = "Notter Backend"
authors = [
    {name = "Raphael Castro", email = "rafaphcastro@gmail.com"},
]
requires-python = ">= 3.12, < 3.13"
readme = "README.md"
license = {text = "MIT"}
dependencies = [
    "fastapi~=0.111.0",
    "pydantic[email]~=2.7",
    "argon2-cffi~=23.1",
    "fastapi-lifespan-manager~=0.1.4",
    "PyJWT~=2.8",
    "python-json-logger~=2.0",
    "pydash~=8.0",
    "psycopg[binary]~=3.1",
    "psycopg-pool~=3.2",
]

[tool.pdm]
distribution = false

[[tool.pdm.source]]
url = "https://pypi.org/simple"
verify_ssl = true
name = "pypi"

[tool.pdm.dev-dependencies]
lint = [
    "mypy~=1.10",
    "pre-commit~=3.7",
    "ruff~=0.4.8",
]
test = [
    "pytest~=8.2",
    "pytest-cov~=5.0",
    "pytest-testdox~=3.1",
    "pytest-xdist[psutil]~=3.6",
    "anyio~=4.4",
    "faker~=25.2",
    "httpx~=0.27.0",
]

[tool.pdm.scripts]
format = "ruff format src tests"
lint-ruff = "ruff check --fix src tests"
lint-mypy = "dmypy run src tests -- --use-fine-grained-cache"
lint = {composite = ["lint-ruff", "lint-mypy"]}
test = "pytest tests"
test-cov = "pytest tests -n auto --cov-branch --cov-fail-under=91 --cov=src --cov-report term --cov-report xml:coverage/coverage.xml --cov-report html:coverage --cov-report lcov:coverage/lcov.info"
post_install = "pre-commit install -f --install-hooks"
migrate = {shell="goose --dir migrations postgres $DATABASE_URL up"}
start = {shell = "python main.py | jq"}

[tool.ruff]
target-version = "py312"
line-length = 79

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # mccabe
    "C90",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # flake8-annotations
    "ANN",
    # flake8-type-checking
    "TCH",
    # flake8-logging
    "LOG",
    # flake8-logging-format
    "G",
    # flake8-errmsg
    "EM",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-import-conventions
    "ICN",
    # flake8-self
    "SLF",
    # flake8-unused-arguments
    "ARG",
    # flake8-return
    "RET",
    # flake8-pie
    "PIE",
    # flake8-pyi,
    "PYI",
    # flake8-quotes,
    "Q",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-boolean-trap
    "FBT",
    # flake8-comprehensions
    "C4",
    # flake8-datetimez
    "DTZ",
    # flake8-bandit
    "S",
    # flake8-use-pathlib
    "PTH",
    # Pylint
    "PL",
    # Ruff-specific rules
    "RUF",
    # Perflint
    "PERF",
    # flake8-pytest-style,
    "PT",
    # isort
    "I",
]
ignore = [
  # missing-trailing-comma
  "COM812",
  # single-line-implicit-string-concatenation
  "ISC001",
  # missing-type-self
  "ANN101",
  # mutable-class-default
  "RUF012",
  # missing-type-cls
  "ANN102",
  # non-pep695-type-alias (mypy does not support yet)
  "UP040",
  # subprocess-without-shell-equals-true
  "S603",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
  # get-attr-with-constant
  "B009",
  # typing-only-standard-library-import
  "TCH003",
  # typing-only-first-party-import
  "TCH001",
  # assert
  "S101",
]

[tool.ruff.lint.isort]
forced-separate = ["src"]

[tool.mypy]
python_version = "3.12"
plugins = [
  "pydantic.mypy",
]
pretty = true
strict = true
warn_unreachable = true
disallow_any_explicit = true
disallow_any_decorated = true
disallow_any_unimported = true
disallow_untyped_defs = true
disable_error_code = [
  "type-abstract",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

[tool.pytest.ini_options]
addopts = "--testdox -s -x -vv"
